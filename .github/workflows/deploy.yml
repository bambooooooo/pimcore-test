name: Symfony production deployment

on:
    push:
        branches:
            - main

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Deploy using SSH
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SSH_PORT }}
                  passphrase: ${{ secrets.SSH_PASSPHRASE }}
                  script: |
                      cd ~/pimcore-test
                      git reset --hard
                      git pull origin main
                      git checkout main
                      git log -n 1 --pretty='format:%h'

                      echo "APP_DOMAIN=${{ secrets.APP_DOMAIN }}" >> .env
                      echo "MQ_HOST=${{ secrets.MQ_HOST }}" >> .env
                      echo "MQ_PORT=${{ secrets.MQ_PORT }}" >> .env
                      echo "MQ_VHOST=${{ secrets.MQ_VHOST }}" >> .env
                      echo "MQ_USER=${{ secrets.MQ_USER }}" >> .env
                      echo "MQ_PWD=${{ secrets.MQ_PWD }}" >> .env
                      echo "GS1_USERNAME=${{ secrets.GS1_USER }}" >> .env
                      echo "GS1_PASSWORD=${{ secrets.GS1_PWD }}" >> .env
                      echo "DEEPL_APIKEY=${{ secrets.DEEPL_APIKEY }}" >> .env
                      echo "DEEPL_DOM_RENEW=${{ secrets.DEEPL_DOM_RENEW }}" >> .env
                      echo "SGT_HOST=${{ secrets.SGT_HOST }}" >> .env
                      echo "SGT_PORT=${{ secrets.SGT_PORT }}" >> .env
                      echo "ALLEGRO_CLIENT_ID=${{ secrets.ALLEGRO_CLIENT_ID }}" >> .env
                      echo "ALLEGRO_CLIENT_SECRET=${{ secrets.ALLEGRO_CLIENT_SECRET }}" >> .env
                      echo "SGT_HOST=${{ secrets.ALLEGRO_CS_ID }}" >> .env
                      echo "SGT_PORT=${{ secrets.SYSTEM_CS_ID }}" >> .env

                      docker compose -f dokcer-compose.yaml -f docker-compose.prod.yaml up -d
                      docker compose exec php composer install --no-dev --optimize-autoloader
                      docker compose exec php bin/console pimcore:maintenance-mode --ignore-maintenance-mode --enable
                      docker compose exec php bin/console pimcore:deployment:post-update
                      docker compose exec php bin/console pimcore:deployment:classes-rebuild -c --ignore-maintenance-mode
                      docker compose exec php bin/console pimcore:deployment:classes-rebuild -d -n --ignore-maintenance-mode
                      docker compose exec php bin/console stocks:install
                      docker compose stop supervisord
                      docker compose rm -f supervisord
                      docker compose up supervisord -d
                      docker compose exec php bin/console pimcore:maintenance-mode --ignore-maintenance-mode --disable

